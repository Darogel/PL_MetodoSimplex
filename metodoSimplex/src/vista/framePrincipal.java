/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controlador.atributoFuncion;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Darwin
 */
public class framePrincipal extends javax.swing.JFrame {

    /**
     * Creates new form framePrincipal
     */
    DefaultTableModel modelo;
    atributoFuncion funcionObj = new atributoFuncion();
    atributoFuncion restriccion = new atributoFuncion();
    ArrayList<atributoFuncion> funcion = new ArrayList<>();
    ArrayList<Integer> restric = new ArrayList<>();
    
    int op = 0;
    int var = 0;
    int cant = 0;
    
    int termina = 0;
    int colpiv;
    
    int renglonpiv = 0;
    double matriz[][];
    String cad = "";

    public framePrincipal() {
        initComponents();
        lblF.setVisible(false);
        jLabel5.setVisible(false);
        jLabel6.setVisible(false);
        jLabel7.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);

        modelo = (DefaultTableModel) jtbPrincipal.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        spnFO = new javax.swing.JSpinner();
        btnAgregarFO = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        spnRestriccion = new javax.swing.JSpinner();
        btnAgregarRes = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        rtnMax = new javax.swing.JRadioButton();
        rtnMin = new javax.swing.JRadioButton();
        lbFuncionObj = new javax.swing.JLabel();
        lblF = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbPrincipal = new javax.swing.JTable();
        btnEjecutar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Escoga Operación: ");

        btnAgregarFO.setText("Agregar Función");
        btnAgregarFO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarFOActionPerformed(evt);
            }
        });

        jLabel2.setText("Ingrese Cantidad variables F.O: ");

        btnAgregarRes.setText("Agregar Restricciones");
        btnAgregarRes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarResActionPerformed(evt);
            }
        });

        jLabel3.setText("Ingrese Cantidad Restricciones: ");

        rtnMax.setText("Maximizar");

        rtnMin.setText("Minimizar");

        lblF.setText("Funcion Objetiva: ");

        jLabel4.setText("Restricciones: ");

        jLabel5.setText("jLabel5");

        jLabel6.setText("jLabel6");

        jLabel7.setText("jLabel7");

        jLabel8.setText("jLabel8");

        jLabel9.setText("jLabel9");

        jLabel10.setText("jLabel10");

        jtbPrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "X1", "X2", "X3", "X4", "X5", "X6", "Operador", "B"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtbPrincipal);

        btnEjecutar.setText("Empezar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnEjecutar)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addContainerGap()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(jLabel3)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(spnRestriccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(btnAgregarRes))
                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                    .addComponent(jLabel2)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(spnFO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(82, 82, 82)
                                                    .addComponent(btnAgregarFO)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(58, 58, 58)
                                                .addComponent(rtnMax)
                                                .addGap(18, 18, 18)
                                                .addComponent(rtnMin))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lblF)
                                                .addGap(31, 31, 31)
                                                .addComponent(lbFuncionObj))
                                            .addComponent(jLabel4)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(121, 121, 121)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9)
                                            .addComponent(jLabel10))))
                                .addGap(179, 179, 179)))
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rtnMax)
                    .addComponent(rtnMin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spnFO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarFO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spnRestriccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarRes))
                .addGap(18, 18, 18)
                .addComponent(lblF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbFuncionObj)
                .addGap(35, 35, 35)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(btnEjecutar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarFOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarFOActionPerformed
        // TODO add your handling code here:
        int intOp = (Integer) spnFO.getValue() + 2;
        for (int i = 0; i < intOp; i++) {
            if (i == intOp - 1) {
                var = Integer.parseInt(JOptionPane.showInputDialog("Ingrese valor independiente"));
                cad += "(" + var + ")";
                funcionObj.valorIndependiente = Double.parseDouble(String.valueOf(var));
                modelo.setValueAt(var, 0, 8);
            } else {
                if (i == intOp - 2) {
                    op = JOptionPane.showOptionDialog(null, "Seleccione el operador",
                            "Ingresar funcion", JOptionPane.YES_NO_CANCEL_OPTION,
                            JOptionPane.QUESTION_MESSAGE, null, new Object[]{"≥",
                                "=", "≤"}, "≥");
                    System.out.println(op);
                    switch (op) {
                        case 0:
                            cad += "≥";
                            break;
                        case 1:
                            cad += "=";
                            break;
                        case 2:
                            cad += "≤";
                            break;
                    }
                    modelo.setValueAt(op, 0, 7);
                    funcionObj.condicion = op;
                } else {
                    var = Integer.parseInt(JOptionPane.showInputDialog("Ingrese valor de X" + (i + 1)));
                    if (i == 0) {
                        cad += "(" + var + "X" + (i + 1) + ")";
                    } else {
                        cad += " + " + "(" + var + "X" + (i + 1) + ")";
                    }
                    modelo.setValueAt(var, 0, i + 1);
                    funcionObj.variables.add(Double.parseDouble(String.valueOf(var)));

                }
            }
        }
        funcion.add(funcionObj);

        lblF.setVisible(true);
        lbFuncionObj.setText(cad);
    }//GEN-LAST:event_btnAgregarFOActionPerformed

    private void btnAgregarResActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarResActionPerformed
        // TODO add your handling code here:
        int intOpR = (Integer) spnRestriccion.getValue();
        if (rtnMin.isSelected()) {
            for (int i = 0; i < intOpR; i++) {
                cant = Integer.parseInt(JOptionPane.showInputDialog("Ingrese cantidad variables para Restriccion: " + (i + 1))) + 2;
                for (int j = 0; j < cant; j++) {
                    atributoFuncion restriccion = new atributoFuncion();
                    if (j == cant - 1) {
                        var = Integer.parseInt(JOptionPane.showInputDialog("Ingrese valor independiente"));
                        cad += "(" + var + ")";
                        modelo.setValueAt(var, i + 1, 8);
                        restriccion.valorIndependiente = Double.parseDouble(String.valueOf(var));
                    } else {
                        if (j == cant - 2) {
                            op = JOptionPane.showOptionDialog(null, "Seleccione el operador",
                                    "Ingresar funcion", JOptionPane.YES_NO_CANCEL_OPTION,
                                    JOptionPane.QUESTION_MESSAGE, null, new Object[]{"≥",
                                        "=", "≤"}, "≥");
                            System.out.println(op);
                            switch (op) {
                                case 0:
                                    cad += "≥";
                                    break;
                                case 1:
                                    cad += "=";
                                    break;
                                case 2:
                                    cad += "≤";
                                    break;
                            }
                            modelo.setValueAt(op, i + 1, 7);
                            restriccion.condicion = op;
                        } else {
                            var = Integer.parseInt(JOptionPane.showInputDialog("Ingrese valor de X" + (j + 1)));
                            if (j == 0) {
                                cad += "(" + var + "X" + (j + 1) + ")";
                            } else {
                                cad += " + " + "(" + var + "X" + (j + 1) + ")";
                            }
                            modelo.setValueAt(var, i + 1, j + 1);
                            restriccion.variables.add(Double.parseDouble(String.valueOf(var)));
                        }
                    }

                }
                switch (i) {
                    case 0:
                        jLabel5.setVisible(true);
                        jLabel5.setText(cad);
                        break;
                    case 1:
                        jLabel6.setVisible(true);
                        jLabel6.setText(cad);
                        break;
                    case 2:
                        jLabel7.setVisible(true);
                        jLabel7.setText(cad);
                        break;
                    case 3:
                        jLabel8.setVisible(true);
                        jLabel8.setText(cad);
                        break;
                }
                cad = "";
                cant = 0;
                funcion.add(restriccion);
            }
            for (int i = 0; i < funcion.size(); i++) {
                System.out.println(funcion.get(i) + "");
            }
        } else {
            if (rtnMax.isSelected()) {
//                for (int i = 0; i < intOpR; i++) {
//                    cant = Integer.parseInt(JOptionPane.showInputDialog("Ingrese cantidad variables para Restriccion: " + (i + 1))) + 2;
//                    for (int j = 0; j < cant; j++) {
//                        if (j == cant - 1) {
//                            var = Integer.parseInt(JOptionPane.showInputDialog("Ingrese valor independiente"));
//                            cad += "(" + var + ")";
//                            restric.add(var);
//                        } else {
//                            if (j == cant - 2) {
//                                op = JOptionPane.showOptionDialog(null, "Seleccione el operador",
//                                        "Ingresar funcion", JOptionPane.YES_NO_CANCEL_OPTION,
//                                        JOptionPane.QUESTION_MESSAGE, null, new Object[]{"≥",
//                                            "=", "≤"}, "≥");
//                                System.out.println(op);
//                                switch (op) {
//                                    case 0:
//                                        cad += "≥";
//                                        break;
//                                    case 1:
//                                        cad += "=";
//                                        break;
//                                    case 2:
//                                        cad += "≤";
//                                        break;
//                                }
//                                restric.add(op);
//                            } else {
//                                var = Integer.parseInt(JOptionPane.showInputDialog("Ingrese valor de X" + (j + 1)));
//                                if (j == 0) {
//                                    cad += "(" + var + "X" + (j + 1) + ")";
//                                } else {
//                                    cad += " + " + "(" + var + "X" + (j + 1) + ")";
//                                }
//                                restric.add(var);
//                            }
//                        }
//                    }
//                    switch (i) {
//                        case 0:
//                            jLabel5.setVisible(true);
//                            jLabel5.setText(cad);
//                            break;
//                        case 1:
//                            jLabel6.setVisible(true);
//                            jLabel6.setText(cad);
//                            break;
//                        case 2:
//                            jLabel6.setVisible(true);
//                            jLabel6.setText(cad);
//                            break;
//                        case 3:
//                            jLabel7.setVisible(true);
//                            jLabel7.setText(cad);
//                            break;
//                    }
//                    cad = "";
//                    cant = 0;
//                }
//                res.setRestric(restric);
//                res.setNumRestriccion(intOpR - 2);
            }
        }
        
    }//GEN-LAST:event_btnAgregarResActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        // TODO add your handling code here:
        int columna = jtbPrincipal.getColumnCount();
        int fila = jtbPrincipal.getRowCount();
        matriz = new double[fila][columna];
        for (int i = 0; i < fila; i++) {
            for (int j = 0; j < columna; j++) {
                if (modelo.getValueAt(i, j) == null) {
                    matriz[i][j] = 0;
                } else {
                    matriz[i][j] = Integer.parseInt(String.valueOf(modelo.getValueAt(i, j)).trim());

                }
            }
        }
        for (int i = 0; i < fila; i++) {
            for (int j = 0; j < columna; j++) {
                System.out.print(matriz[i][j] + " | ");
            }
            System.out.println("");
        }
        if (termina == 1) {
            JOptionPane.showMessageDialog(null, "El ejercicio ya esta terminado");
        } else {
            //Valores para verificar menor 
            int buscame = 9999999;
            for (int i = 0; i < 1; i++) {
                for (int j = 0; j < columna; j++) {
                    if (buscame >= matriz[i][j]) {
                        buscame = (int) matriz[i][j];
                        //Aqui esta el valor de mi columna pivote en la siguiente variable
                        colpiv = j;
                    }
                }
            }

            double buscamey = 999999999;
            int cont = 0;
            double div = 0;
            for (int i = 0; i < 3; i++) {
                for (int j = colpiv; j < colpiv + 1; j++) {
                    div = matriz[cont][8] / matriz[cont][colpiv];
                    cont++;
                    if (div < buscamey) {
                        buscamey = div;
                        renglonpiv = i;
                    }
                }
                //System.out.println("Resultado div " + div);
            }
            renglonPivote();
            //RenglonesQuefaltan();
        }
        double comprobar[][] = new double[fila][columna];
        for (int i = 0; i < fila; i++) {
            for (int j = 0; j < columna; j++) {
                if (modelo.getValueAt(i, j) == null) {
                    comprobar[i][j] = 0;
                } else {
                    comprobar[i][j] = Integer.parseInt(String.valueOf(modelo.getValueAt(i, j)).trim());
                    System.out.println("*------*");
                }
            }
        }
        for (int i = 0; i < fila; i++) {
            for (int j = 0; j < columna; j++) {
                System.out.print(comprobar[i][j] + " | ");
            }
            System.out.println("");
        }
        if (termina == 0) {
            if (comprobar[0][0] >= 0 && comprobar[0][1] >= 0 && comprobar[0][2] >= 0
                    && comprobar[0][3] >= 0 && comprobar[0][4] >= 0 && comprobar[0][5] >= 0
                    && comprobar[0][6] >= 0 && comprobar[0][8] >= 0) {
                JOptionPane.showMessageDialog(null, "Genial el ejercicio esta terminado");
                termina++;
            } else {
                JOptionPane.showMessageDialog(null, "Aun quedan Iteraciones");

            }
        }

    }//GEN-LAST:event_btnEjecutarActionPerformed

    public void renglonPivote() {
        int columna = jtbPrincipal.getColumnCount();
//        int fila = jtbPrincipal.getRowCount();
//        double matriz[][] = new double[fila][columna];
//        for (int i = 0; i < fila; i++) {
//            for (int j = 0; j < columna; j++) {
//                if (modelo.getValueAt(i, j) == null) {
//                    matriz[i][j] = 0;
//                } else {
//                    matriz[i][j] = Integer.parseInt(String.valueOf(modelo.getValueAt(i, j)).trim());
//
//                }
//            }
//        }

        if (renglonpiv == 0) {
            double renglonPivote = 0;
            for (int i = renglonpiv; i < renglonpiv + 1; i++) {
                for (int j = 0; j < columna; j++) {
                    renglonPivote = matriz[renglonpiv][j] / matriz[renglonpiv][colpiv];
                    if (j == 7) {
                        modelo.setValueAt(matriz[i][j], i, j);
                    } else {
                        modelo.setValueAt(renglonPivote, i, j);
                    }
                }
            }
        }
        if (renglonpiv == 1) {
            double renglonPivote = 0;
            for (int i = renglonpiv; i < renglonpiv + 1; i++) {
                for (int j = 0; j < columna; j++) {
                    renglonPivote = matriz[renglonpiv][j] / matriz[renglonpiv][colpiv];
                    if (j == 7) {
                        modelo.setValueAt(matriz[i][j], i, j);
                    } else {
                        modelo.setValueAt(renglonPivote, i, j);
                    }
                }
            }
        }
        if (renglonpiv == 2) {
            double renglonPivote = 0;
            for (int i = renglonpiv; i < renglonpiv + 1; i++) {
                for (int j = 0; j < columna; j++) {
                    renglonPivote = matriz[renglonpiv][j] / matriz[renglonpiv][colpiv];
                    if (j == 7) {
                        modelo.setValueAt(matriz[i][j], i, j);
                    } else {
                        modelo.setValueAt(renglonPivote, i, j);
                    }
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(framePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(framePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(framePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(framePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new framePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarFO;
    private javax.swing.JButton btnAgregarRes;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtbPrincipal;
    private javax.swing.JLabel lbFuncionObj;
    private javax.swing.JLabel lblF;
    private javax.swing.JRadioButton rtnMax;
    private javax.swing.JRadioButton rtnMin;
    private javax.swing.JSpinner spnFO;
    private javax.swing.JSpinner spnRestriccion;
    // End of variables declaration//GEN-END:variables

}
